<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <artifactId>freelib-djatoka</artifactId>
  <packaging>maven-plugin</packaging>
  <version>1.1.3-SNAPSHOT</version>
  <name>FreeLibrary Djatoka</name>
  <description>A fork of the aDORe-Djatoka JPEG2000 image server</description>
  <url>http://projects.freelibrary.info/freelib-djatoka</url>
  <inceptionYear>20110701</inceptionYear>

  <licenses>
    <license>
      <name>GNU Lesser General Public License, Version 3.0</name>
      <url>http://www.gnu.org/licenses/lgpl-3.0.html</url>
      <comments>Licensed under the GNU LGPL 3.0 or later (at your option)</comments>
    </license>
  </licenses>

  <scm>
    <connection>scm:git:git@github.com:ksclarke/freelib-djatoka.git</connection>
    <developerConnection>scm:git:git@github.com:ksclarke/freelib-djatoka.git</developerConnection>
    <url>git@github.com:ksclarke/freelib-djatoka.git</url>
  </scm>
  <issueManagement>
    <system>GitHub</system>
    <url>https://github.com/ksclarke/freelib-djatoka/issues</url>
  </issueManagement>

  <developers>
    <developer>
      <name>Ryan Chute</name>
      <roles>
        <role>original developer</role>
        <role>project architect</role>
      </roles>
    </developer>
    <developer>
      <email>ksclarke@gmail.com</email>
      <name>Kevin S. Clarke</name>
      <url>http://kevinclarke.info</url>
      <roles>
        <role>developer</role>
        <role>fork maintainer</role>
      </roles>
      <timezone>America/New_York</timezone>
    </developer>
  </developers>

  <properties>
    <!-- The port Jetty should run at -->
    <jetty.port>8888</jetty.port>
    <!-- Key used to stop jetty; this should be overridden in settings.xml -->
    <jetty.stop.key>cough</jetty.stop.key>

    <!-- The types of files you want to ingest -->
    <djatoka.ingest.exts>tiff,tif</djatoka.ingest.exts>
    <!-- The source image file system from which to ingest/convert images -->
    <djatoka.ingest.data>${project.basedir}/src/test/resources/images</djatoka.ingest.data>
    <!-- Where the JP2s should be stored -->
    <djatoka.jp2.data>${project.basedir}/target/images</djatoka.jp2.data>
    <!-- The cache the OpenURL system uses when it creates an object -->
    <openurl.cache.dir>${project.basedir}/target/tmpcache</openurl.cache.dir>
    <!-- Separate cache used for the permanent pairtree storage system -->
    <djatoka.view.cache>${project.basedir}/target/cache</djatoka.view.cache>
    <!-- Max TIFF file size allowed for ingest (specified in MB) -->
    <djatoka.ingest.maxSize>900</djatoka.ingest.maxSize>
    <!-- Supported: "", "sLUM", "sRGB", "sYCC", "iccLUM" or "iccRGB" -->
    <djatoka.ingest.color.space>sRGB</djatoka.ingest.color.space>

    <!-- List of image sources (used when a URL is passed in) -->
    <djatoka.ingest.sources>^http://localhost/islandora/object/([a-zA-Z]*(%3A|:)[0-9a-zA-Z]*)/datastream/JP2/view.*$
      ^http://localhost:${jetty.port}/images/([a-z0-9A-Z\-]*).jp2$</djatoka.ingest.sources>
    <!-- List of image source guesses (used when ID can't be otherwise resolved) -->
    <djatoka.ingest.guesses>http://localhost/islandora/object/{}/datastream/JP2/view
      http://localhost:${jetty.port}/images/{}.jp2</djatoka.ingest.guesses>

    <!-- The reasonable default is to not cache scale requests that aren't 1.0. Since pct:XX is so easy, though, we might 
      want exceptions for specific ones (for full images only); one possible use case is thumbnail creation. -->
    <djatoka.scale.cache.exceptions>0.15 0.10
      0.05</djatoka.scale.cache.exceptions>

    <!-- This can be toggled for more console output -->
    <console.log>false</console.log>

    <!-- Dependency versions -->
    <freelib.utils.version>0.5.0</freelib.utils.version>
    <commons.exec.version>1.3</commons.exec.version>
    <xml.apis.version>1.0.b2</xml.apis.version>
    <commons.cli.version>1.2</commons.cli.version>
    <jsap.version>2.1</jsap.version>
    <imgscalr.lib.version>4.2</imgscalr.lib.version>
    <opencsv.version>2.3</opencsv.version>
    <jackson.databind.version>2.4.4</jackson.databind.version>
    <failsafe.version>2.19.1</failsafe.version>
    <ij.version>1.49p</ij.version>

    <!-- You shouldn't need to set anything below here; these are generic -->
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>info.freelibrary</groupId>
      <artifactId>freelib-utils</artifactId>
      <version>${freelib.utils.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-exec</artifactId>
      <version>${commons.exec.version}</version>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
    </dependency>
    <dependency>
      <groupId>xml-apis</groupId>
      <artifactId>xml-apis</artifactId>
      <version>${xml.apis.version}</version>
    </dependency>
    <dependency>
      <groupId>commons-cli</groupId>
      <artifactId>commons-cli</artifactId>
      <version>${commons.cli.version}</version>
    </dependency>
    <dependency>
      <groupId>com.martiansoftware</groupId>
      <artifactId>jsap</artifactId>
      <version>${jsap.version}</version>
    </dependency>
    <dependency>
      <groupId>xom</groupId>
      <artifactId>xom</artifactId>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty.websocket</groupId>
      <artifactId>websocket-servlet</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-servlet</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>kdu</groupId>
      <artifactId>kdu_jni</artifactId>
      <version>0.0.0</version>
      <scope>system</scope>
      <systemPath>${project.basedir}/lib/kdu_jni.jar</systemPath>
    </dependency>
    <dependency>
      <groupId>imagej</groupId>
      <artifactId>ij-ImageIO</artifactId>
      <version>0.0.0</version>
      <scope>system</scope>
      <systemPath>${project.basedir}/lib/ij-ImageIO.jar</systemPath>
    </dependency>
    <dependency>
      <groupId>org.imgscalr</groupId>
      <artifactId>imgscalr-lib</artifactId>
      <version>${imgscalr.lib.version}</version>
    </dependency>
    <dependency>
      <groupId>net.imagej</groupId>
      <artifactId>ij</artifactId>
      <version>${ij.version}</version>
    </dependency>
    <dependency>
      <groupId>net.sf.opencsv</groupId>
      <artifactId>opencsv</artifactId>
      <version>${opencsv.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>${jackson.databind.version}</version>
    </dependency>
    <!-- Below here are the dependencies for our Maven mojos -->
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.plugin-tools</groupId>
      <artifactId>maven-plugin-annotations</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-core</artifactId>
    </dependency>
  </dependencies>
  <build>
    <resources>
      <resource>
        <directory>${basedir}/src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
    <plugins>
      <!-- Turns down Maven's default logging levels. -->
      <plugin>
        <groupId>info.freelibrary</groupId>
        <artifactId>freelib-utils</artifactId>
        <version>${freelib.utils.version}</version>
        <executions>
          <execution>
            <id>validate-logging-configuration</id>
            <phase>validate</phase>
            <goals>
              <goal>configure-logging</goal>
            </goals>
          </execution>
          <execution>
            <id>clean-logging</id>
            <phase>pre-clean</phase>
            <goals>
              <goal>configure-logging</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Checks project's code for conformance to coding standards -->
      <plugin>
        <artifactId>maven-checkstyle-plugin</artifactId>
      </plugin>
      <!-- Extracts project site's css and js from freelib-build-tools jar -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-plugin-plugin</artifactId>
        <configuration>
          <goalPrefix>djatoka</goalPrefix>
        </configuration>
      </plugin>
      <!-- Failsafe plugin for functional tests -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <systemPropertyVariables>
            <jetty.port>${jetty.port}</jetty.port>
            <pairtree.root>${djatoka.jp2.data}/pairtree_root</pairtree.root>
            <pairtree.cache>${djatoka.jp2.data}</pairtree.cache>
          </systemPropertyVariables>
          <excludes>
            <exclude>**/ConfigurationFunctionalTest.java</exclude>
          </excludes>
          <includes>
            <include>**/*FunctionalTest.java</include>
          </includes>
        </configuration>
      </plugin>
      <!-- Generates things like Jetty stop port -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
      </plugin>
      <!-- The jetty plugin is how we run djatoka from within Maven -->
      <plugin>
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-maven-plugin</artifactId>
        <version>${jetty.version}</version>
        <dependencies>
          <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-servlets</artifactId>
            <version>${jetty.version}</version>
          </dependency>
          <dependency>
            <groupId>kdu</groupId>
            <artifactId>kdu_jni</artifactId>
            <version>0.0.0</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/lib/kdu_jni.jar</systemPath>
          </dependency>
          <dependency>
            <groupId>imagej</groupId>
            <artifactId>ij-ImageIO</artifactId>
            <version>0.0.0</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/lib/ij-ImageIO.jar</systemPath>
          </dependency>
          <dependency>
            <groupId>imagej</groupId>
            <artifactId>ij</artifactId>
            <version>0.0.0</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/lib/ij.jar</systemPath>
          </dependency>
        </dependencies>
        <configuration>
          <!-- Putting JVM args in CDATA to prevent wrapping -->
          <jvmArgs><![CDATA[-Djetty.port=${jetty.port} -Dkakadu.home=${LD_LIBRARY_PATH} -Djava.library.path=${LD_LIBRARY_PATH} -DDJATOKA_HOME=${basedir} -DLD_LIBRARY_PATH=${LD_LIBRARY_PATH} -DDYLD_LIBRARY_PATH=${basedir}/${DYLD_LIBRARY_PATH}]]></jvmArgs>
          <stopKey>${jetty.stop.key}</stopKey>
          <stopPort>8993</stopPort>
          <scanIntervalSeconds>0</scanIntervalSeconds>
          <!-- Tells Maven process not to wait on the forked Jetty server -->
          <waitForChild>${console.log}</waitForChild>
          <!-- Access log -->
          <requestLog implementation="org.eclipse.jetty.server.NCSARequestLog">
            <filename>target/yyyy_mm_dd.request.log</filename>
            <retainDays>30</retainDays>
            <append>true</append>
            <extended>false</extended>
            <logTimeZone>GMT</logTimeZone>
          </requestLog>
        </configuration>
        <executions>
          <execution>
            <id>start-jetty</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>run-forked</goal>
            </goals>
          </execution>
          <execution>
            <id>stop-jetty</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <!-- Profiles for particular operating systems -->
    <profile>
      <id>linux-32</id>
      <activation>
        <os>
          <name>Linux</name>
          <arch>i386</arch>
        </os>
      </activation>
      <properties>
        <LD_LIBRARY_PATH>${project.basedir}/lib/Linux-x86-32</LD_LIBRARY_PATH>
      </properties>
    </profile>
    <profile>
      <id>linux-64</id>
      <activation>
        <os>
          <name>Linux</name>
          <arch>amd64</arch>
        </os>
      </activation>
      <properties>
        <LD_LIBRARY_PATH>${project.basedir}/lib/Linux-x86-64-gcc</LD_LIBRARY_PATH>
      </properties>
    </profile>
    <profile>
      <id>mac-x86</id>
      <activation>
        <os>
          <name>Mac OS X</name>
        </os>
      </activation>
      <properties>
        <!-- Include both b/c java.library.path is set to LD_LIBRARY_PATH -->
        <DYLD_LIBRARY_PATH>lib/Mac-x86</DYLD_LIBRARY_PATH>
        <LD_LIBRARY_PATH>lib/Mac-x86</LD_LIBRARY_PATH>
      </properties>
    </profile>
    <profile>
      <id>windows</id>
      <activation>
        <os>
          <family>windows</family>
          <arch>x86</arch>
        </os>
      </activation>
      <properties>
        <LD_LIBRARY_PATH>${project.basedir}/lib/Win32</LD_LIBRARY_PATH>
      </properties>
    </profile>
    <profile>
      <id>solaris-x86</id>
      <activation>
        <os>
          <name>SunOS</name>
          <arch>x86</arch>
        </os>
      </activation>
      <properties>
        <LD_LIBRARY_PATH>${project.basedir}/lib/Solaris-x86</LD_LIBRARY_PATH>
      </properties>
    </profile>
    <profile>
      <id>solaris-sparc</id>
      <activation>
        <os>
          <name>SunOS</name>
          <arch>sparc</arch>
        </os>
      </activation>
      <properties>
        <LD_LIBRARY_PATH>${project.basedir}/lib/Solaris-Sparc</LD_LIBRARY_PATH>
      </properties>
    </profile>
    <profile>
      <id>solaris-sparcv9</id>
      <activation>
        <os>
          <name>Solaris</name>
          <arch>sparc</arch>
        </os>
      </activation>
      <properties>
        <LD_LIBRARY_PATH>${project.basedir}/lib/Solaris-Sparcv9</LD_LIBRARY_PATH>
      </properties>
    </profile>

    <!-- Build profile just used on Travis-CI VM to run the integration tests -->
    <profile>
      <id>travis</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>${failsafe.version}</version>
            <configuration>
              <systemPropertyVariables>
                <jetty.port>${jetty.port}</jetty.port>
                <pairtree.root>${djatoka.jp2.data}/pairtree_root</pairtree.root>
                <pairtree.cache>${djatoka.jp2.data}</pairtree.cache>
              </systemPropertyVariables>
              <includes>
                <include>**/*IntegrationTest.java</include>
                <include>**/*FunctionalTest.java</include>
              </includes>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>integration-test</goal>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <!-- Enables pushing project documentation up to an S3 bucket -->
  <distributionManagement>
    <site>
      <id>s3.site</id>
      <url>s3://projects.freelibrary.info/freelib-djatoka</url>
    </site>
  </distributionManagement>

  <!-- Pulls in standard FreeLibrary Project configuration options -->
  <parent>
    <artifactId>freelib-parent</artifactId>
    <groupId>info.freelibrary</groupId>
    <version>0.0.8</version>
  </parent>

</project>
